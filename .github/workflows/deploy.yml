name: Deploy Monitoring Service (Grafana)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: devdham-production-16
  REGION: asia-south1
  SERVICE_NAME: grafana

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Grafana configuration
      run: |
        # Check if Grafana configuration files exist
        test -f grafana/grafana.ini
        test -f grafana/Dockerfile
        test -f docker-compose.yml
        echo "‚úÖ Configuration files validated"
    
    - name: Validate dashboards
      run: |
        # Check dashboard JSON files for valid syntax
        if [ -d "dashboards" ]; then
          for dashboard in dashboards/*.json; do
            if [ -f "$dashboard" ]; then
              echo "Validating $dashboard..."
              python -m json.tool "$dashboard" > /dev/null
            fi
          done
        fi
        echo "‚úÖ Dashboard files validated"
    
    - name: Test Docker build
      run: |
        cd grafana
        docker build -t test-grafana .
        echo "‚úÖ Docker build successful"

  deploy-production:
    # Only deploy on main branch (production-only service)
    if: github.ref == 'refs/heads/main'
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build Docker image
      run: |
        cd grafana
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
                     -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
    
    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run (Production Only)
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --service-account grafana-cloud-run@$PROJECT_ID.iam.gserviceaccount.com \
          --add-cloudsql-instances $PROJECT_ID:$REGION:grafana-db \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 5 \
          --port 3000 \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=production \
          --timeout 300 \
          --concurrency 80 \
          --execution-environment gen2 \
          --cpu-throttling
    
    - name: Update traffic
      run: |
        gcloud run services update-traffic $SERVICE_NAME \
          --to-latest \
          --region $REGION
    
    - name: Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region=$REGION \
          --format="value(status.url)")
        
        echo "üîç Service URL: $SERVICE_URL"
        
        # Wait for service to be ready
        echo "‚è≥ Waiting for Grafana to be ready..."
        for i in {1..60}; do
          if curl -f -s "$SERVICE_URL/api/health" > /dev/null; then
            echo "‚úÖ Grafana health check passed"
            echo "üéâ Monitoring service is live at: $SERVICE_URL"
            break
          fi
          echo "‚è≥ Attempt $i/60: Waiting for service to be ready..."
          sleep 10
        done
        
        # Final health check
        if ! curl -f -s "$SERVICE_URL/api/health" > /dev/null; then
          echo "‚ùå Health check failed after 10 minutes"
          exit 1
        fi
    
    - name: Update Cloud SQL connections
      run: |
        # Ensure Cloud SQL proxy connections are properly configured
        gcloud sql instances describe grafana-db \
          --format="value(connectionName)" > /dev/null
        echo "‚úÖ Cloud SQL instance accessible"
    
    - name: Post-deployment validation
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region=$REGION \
          --format="value(status.url)")
        
        # Test key Grafana endpoints
        echo "üß™ Testing Grafana endpoints..."
        
        # Test login page
        if curl -f -s "$SERVICE_URL/login" > /dev/null; then
          echo "‚úÖ Login endpoint accessible"
        else
          echo "‚ö†Ô∏è Login endpoint not accessible"
        fi
        
        # Test API health
        if curl -f -s "$SERVICE_URL/api/health" | grep -q "ok"; then
          echo "‚úÖ API health endpoint working"
        else
          echo "‚ö†Ô∏è API health endpoint not working properly"
        fi
        
        echo "üéØ Deployment validation completed"

  notify:
    if: always()
    needs: [validate, deploy-production]
    runs-on: ubuntu-latest
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "‚úÖ Grafana monitoring service deployed successfully to production"
        else
          echo "‚ùå Grafana deployment failed"
          exit 1
        fi